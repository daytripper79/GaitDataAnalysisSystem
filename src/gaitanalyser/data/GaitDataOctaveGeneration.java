package gaitanalyser.data;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

/**
    The Class GaitDataOctaveGeneration.
 
 	The .CSV files generated by the class GaitDataReception.java allow the generation
	of graphs that will provide meaningful information for the gait analysis. 
	
	These graphs provide both complementary information to the parameters generated in the previous
	phase and new information that only makes sense if represented graphically. It is the
	case of the kinetic data, for instance, the evolution of the angular position of the knee
	by time or the centre of pressures by step.
	
	To obtain these graphs, from the class GaitDataOctaveGeneration.java GNU Octave is called. 
	Octave will execute the scripts GaitPlotGenerationTrial1.m or GaitPlotGenerationTrial2.m 
	depending on the trial. 
	Both files have as input the file_FILES path, the insole size and the foot that
	wears the MAK.
	
	The graphics that will be generated are hereafter listed: 
	<ol> 
	 	<li> Position Angle
		<li> Lateral displacement of hip (Euler X angular position)
		<li> Forward-Backward Displacement of hip (Euler Y angular position) <br>
		<li> Insole sensors pressures by time <br>
		<li> Total pressure in sensors by step<br>
		<li> Max pressure in sensors by step<br>
		<li> Relative pressure in sensors by step<br>
		<li> CoP X and CoP position by Time<br>
		<li> Isolated step sensor pressures and Cop (for all the steps with insole in the experiment)<br>
	</ol> 
 */
public class GaitDataOctaveGeneration{

	/** The octave cmd. */
	String octaveCmd;	
	
	/** The octave script. */
	String octaveScript;
	
	/** The octave image. */
	String octaveImage;
	
	/** The octave foot. */
	String octaveFoot;

	
	/**
	 * Instantiates a new gait data octave generation.
	 *
	 * @param trial the trial (TRIAL_1|TRIAL2)
	 * @param foot the MAK foot (L|R)
	 * @throws FileNotFoundException the file not found exception
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public GaitDataOctaveGeneration(String trial, String foot) throws FileNotFoundException, IOException{
		
		System.out.println("OctaveDataGeneration()");
		
		String path = System.getProperty("user.dir");
		String configFile = path +  "\\" + "gaitanalyser.properties";		    
		Properties properties = new Properties();
		properties.load(new FileInputStream(configFile));
		   
		octaveCmd =  properties.getProperty("OCTAVE_CMD");
		
		if(trial.equals("TRIAL_1")){
			octaveScript =  properties.getProperty("OCTAVE_SCRIPT_1");			
		}else if((trial.equals("TRIAL_2"))) {
			octaveScript =  properties.getProperty("OCTAVE_SCRIPT_2");			
		}
		
		System.out.println("Octave script: " + octaveScript);
				
		octaveFoot = foot;
				
	}

	/**
	 * Generate octave plots.
	 *
	 * @param inputFile the input file absolute path
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @throws InterruptedException the interrupted exception
	 */
	public void generateOctavePlots(String inputFile) throws IOException, InterruptedException{
						
		System.out.println("generateOctavePlots()");
		
		String fileName = inputFile.substring(inputFile.lastIndexOf("\\")+1,inputFile.length());
		int fileNameIndex = fileName.indexOf(".");
		if(fileNameIndex != -1) fileName = fileName.substring(0, fileNameIndex);
		
		int filePathIndex = inputFile.lastIndexOf(fileName);
		String filePath = inputFile.substring(0,filePathIndex);
		
		String octaveOutputPath = filePath + fileName + "_FILES\\" + fileName;
		
		if(octaveOutputPath.contains(" ")){		
			octaveOutputPath = "\"" + octaveOutputPath + "\"";
		}
		
		String octaveExecution = octaveCmd + " " + octaveScript +  " " + octaveOutputPath + " " + octaveFoot;
		
		System.out.println("Octave command: " + octaveExecution);
		
		Process proccess = Runtime.getRuntime().exec(octaveExecution);
		proccess.waitFor();
		
	}		
	
}